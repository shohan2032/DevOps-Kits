name: Multi staging deployment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
    branches:
      - main

jobs:
  check_staging_label:
    runs-on: ubuntu-latest
    outputs:
      has_staging_label: ${{ steps.check_label.outputs.has_staging_label }}
    steps:
      - id: check_label
        run: |
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
          if echo "$labels" | grep -q '^STAGING$'; then
            echo "has_staging_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_staging_label=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_staging_label
    if: needs.check_staging_label.outputs.has_staging_label == 'true'
    name: Install and Build
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}
      SUBDOMAIN: ${{ steps.create-deployment-artifact.outputs.SUBDOMAIN }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: pnpm/action-setup@v3
        with:
          version: 9.13.2

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 18.192.50.113 >> ~/.ssh/known_hosts

      - name: Install dependencies
        run: pnpm install --force --ignore-scripts

      # - uses: actions/cache@v3
      #   name: Setup .next cache
      #   with:
      #     path: ${{ github.workspace }}/.next/cache
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
      #     # If source files changed but packages didn't, rebuild from a prior cache.
      #     restore-keys: |
      #       ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Build
        id: build
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          NODE_OPTIONS: --max-old-space-size=4096
          NEXT_PUBLIC_NODE_ENV: production
          # NEXT_PUBLIC_BUGSNAG_API_KEY: 45adb16b56f90c352656cb6c8c19411b

        run: |
          CONTENT=$(ssh ubuntu@18.192.50.113 cat /home/ubuntu/scripts/backend-port-map.txt)

          echo "CONTENT: $CONTENT"

          SUBDOMAIN=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's|/|-|g' -e 's/[^a-z0-9 -_]//g' -e 's/[[:space:]]\+/-/g' -e 's/-\+/-/g' -e 's/^-//' -e 's/-$//')

          export NEXT_PUBLIC_BACKEND_PORT=$(echo "$CONTENT" | awk -v slug="$SUBDOMAIN" '$2 == slug {print $1}' | head -n 1)
          echo "Before Fallback: $NEXT_PUBLIC_BACKEND_PORT"
          export NEXT_PUBLIC_BACKEND_PORT=${NEXT_PUBLIC_BACKEND_PORT:-3333}

          echo "BACKEND_PORT final: $NEXT_PUBLIC_BACKEND_PORT"

          sed -i "s|'https://cdn.ezycourse.net'|undefined|g" next.config.js
          pnpm build

      - name: Create deployment artifact
        id: create-deployment-artifact
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          SUBDOMAIN=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's|/|-|g' -e 's/[^a-z0-9 -_]//g' -e 's/[[:space:]]\+/-/g' -e 's/-\+/-/g' -e 's/^-//' -e 's/-$//')
          echo "SUBDOMAIN: $SUBDOMAIN"
          echo "SUBDOMAIN=${SUBDOMAIN}" >> $GITHUB_ENV
          echo "SUBDOMAIN=${SUBDOMAIN}" >> $GITHUB_OUTPUT

          # delete .next/cache to reduce the size of the artifact
          rm -rf .next/cache
          echo "Deleted .next/cache"

          tar -czf "${SUBDOMAIN}".tar.gz package.json next.config.js blackList.json whiteList.json .next .scripts public .npmrc

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ steps.create-deployment-artifact.outputs.SUBDOMAIN }}.tar.gz
          retention-days: 1

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./.github/workflows/servers.json)"

          # Filter the JSON based on the releaseType
          FILTERED_JSON=$(echo "$JSON" | jq --arg releaseType "multi-staging" 'map(select(.type == $releaseType))')
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$FILTERED_JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  deploy:
    needs: build
    uses: .github/workflows/publish-to-multi-staging.yml@main
    with:
      deploymentMatrix: ${{ needs.build.outputs.DEPLOYMENT_MATRIX }}
      artifactName: app-build
      fileName: ${{ needs.build.outputs.SUBDOMAIN  }}
    secrets:
      SSH_KEY: ${{  secrets.SSH_KEY }}